generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String                 @id @default(uuid())
  email             String?             @unique
  name              String?
  number            String              @unique
  password          String
  OnRampTransaction OnRampTransaction[]
  Balance           Balance[]
  sentTransfer      P2PTransfer[]       @relation(name: "FromUserRelation")
  receivedTransfer  P2PTransfer[]       @relation(name: "ToUserRelation")
}

model P2PTransfer {
  id         Int      @id @default(autoincrement())
  amount     Int
  timestamp  DateTime
  fromUserId String
  fromUser   User     @relation(name: "FromUserRelation", fields: [fromUserId], references: [id])
  toUserId   String
  toUser     User     @relation(name: "ToUserRelation", fields: [toUserId], references: [id])
  fromMerchantId     String?
  fromMerchant       Merchant? @relation(name: "FromMerchantRelation", fields: [fromMerchantId], references: [id])
  toMerchantId       String?
  toMerchant         Merchant? @relation(name: "ToMerchantRelation", fields: [toMerchantId], references: [id])

  @@unique([fromUserId, fromMerchantId, toUserId, toMerchantId])
}

model Merchant {
  id        String      @id @default(uuid())
  email     String   @unique
  name      String?
  auth_type AuthType
  OnRampTransaction  OnRampTransaction[]
  Balance            Balance[]
  sentTransfer      P2PTransfer[]       @relation(name: "FromMerchantRelation")
  receivedTransfer  P2PTransfer[]       @relation(name: "ToMerchantRelation")
}

model OnRampTransaction {
  id        Int          @id @default(autoincrement())
  status    OnRampStatus
  token     String       @unique
  provider  String
  amount    Int
  startTime DateTime
  userId    String
  user      User         @relation(fields: [userId], references: [id])
  merchantId String?
  merchant   Merchant?    @relation(fields: [merchantId], references: [id])

  @@unique([userId, merchantId])
}

model Balance {
  id     Int  @id @default(autoincrement())
  userId String  @unique
  merchantId String?      @unique
  amount Int              @default(1000)
  locked Int              @default(0)
  user   User @relation(fields: [userId], references: [id])
  merchant   Merchant? @relation(fields: [merchantId], references: [id])

  @@unique([userId, merchantId])
}

enum AuthType {
  Google
  Github
}

enum OnRampStatus {
  Success
  Failure
  Processing
}